/**
 * <html>
 * <body>
 *  <P>  Copyright(C)版权所有 - 2014 广州医享网络科技发展有限公司.</p>
 *  <p>  All rights reserved.</p>
 *  <p> Created on 2015年1月26日</p>
 *  <p> Created by 申午武</p>
 *  </body>
 * </html>
 */
package com.yxw.framework.config;

import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.concurrent.atomic.AtomicBoolean;

import com.yxw.framework.utils.PropertiesUtils;

/**
 * <p>
 * 系统参数
 * </p>
 * 
 * @author 申午武
 * 
 */
public class SystemConfig {
	/**
	 * 系统参数集合
	 */
	public static Map<String, String> systemConfigMap = new HashMap<String, String>();

	//已经执行,不再重复执行.
	private static AtomicBoolean isExeced = new AtomicBoolean(false);

	/**
	 * 业务规则集合
	 */
	// / public static Map<String, Businesses> businessesMap = new HashMap<String, Businesses>();

	private SystemConfig() {

	}

	/**
	 * 加载系统配置文件
	 */
	public static void loadSystemConfig() {
		if (isExeced.compareAndSet(false, true)) {
			PropertiesUtils propertiesUtils =
					new PropertiesUtils("classpath:" + SystemConstants.FILE_SEPARATOR + SystemConstants.YXW_FRAMEWORK_CONFIG, "classpath:"
							+ SystemConstants.FILE_SEPARATOR + SystemConstants.INTERFACE_CONFIG);
			Enumeration<Object> keys = propertiesUtils.getProperties().keys();
			while (keys.hasMoreElements()) {
				String key = keys.nextElement().toString();
				String value = propertiesUtils.getProperty(key);
				SystemConfig.put(key, value);
			}
		}

	}

	// /**
	// * @return the configMap
	// */
	// public static Map<String, String> getConfigMap() {
	// return configMap;
	// }

	/**
	 * 添加参数
	 * 
	 * @param key
	 * @param value
	 */
	public static void put(String key, String value) {
		systemConfigMap.put(key, value);
	}

	/**
	 * 根据key值返回value
	 * 
	 * @param key
	 * @return
	 */
	private static String getValue(String key) {
		return systemConfigMap.get(key);
	}

	/**
	 * 根据key值返回String类型的value.
	 */
	public static String getStringValue(String key) {
		return getValue(key);
	}

	/**
	 * 根据key值返回Integer类型的value.如果都為Null則返回Default值，如果内容错误则抛出异常
	 */
	public static String getStringValue(String key, String defaultValue) {
		String value = getValue(key);
		return value != null ? value : defaultValue;
	}

	/**
	 * 根据key值返回Integer类型的value.如果都為Null或内容错误则抛出异常.
	 */
	public static Integer getIntegerValue(String key) {
		String value = getValue(key);
		if (value == null) {
			throw new NoSuchElementException();
		}
		return Integer.valueOf(value);
	}

	/**
	 * 根据key值返回Integer类型的value.如果都為Null則返回Default值，如果内容错误则抛出异常
	 */
	public static Integer getInteger(String key, Integer defaultValue) {
		String value = getValue(key);
		return value != null ? Integer.valueOf(value) : defaultValue;
	}

	/**
	 * 根据key值返回Double类型的value.如果都為Null或内容错误则抛出异常.
	 */
	public static Double getDoubleValue(String key) {
		String value = getValue(key);
		if (value == null) {
			throw new NoSuchElementException();
		}
		return Double.valueOf(value);
	}

	/**
	 * 根据key值返回Double类型的value.如果都為Null則返回Default值，如果内容错误则抛出异常
	 */
	public static Double getDoubleValue(String key, Integer defaultValue) {
		String value = getValue(key);
		return value != null ? Double.valueOf(value) : defaultValue;
	}

	/**
	 * 根据key值返回Boolean类型的value.如果都為Null抛出异常,如果内容不是true/false则返回false.
	 */
	public static Boolean getBooleanValue(String key) {
		String value = getValue(key);
		if (value == null) {
			throw new NoSuchElementException();
		}
		return Boolean.valueOf(value);
	}

	/**
	 * 根据key值返回Boolean类型的value.如果都為Null則返回Default值,如果内容不为true/false则返回false.
	 */
	public static Boolean getBooleanValue(String key, boolean defaultValue) {
		String value = getValue(key);
		return value != null ? Boolean.valueOf(value) : defaultValue;
	}
}
